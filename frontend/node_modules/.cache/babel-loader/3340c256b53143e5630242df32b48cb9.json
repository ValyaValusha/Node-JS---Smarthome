{"ast":null,"code":"import _defineProperty from \"/Users/c5276648/Documents/node-workshop/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/c5276648/Documents/node-workshop/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/c5276648/Documents/node-workshop/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/c5276648/Documents/node-workshop/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nvar serverUrl = 'http://localhost:3010';\nvar index = 3;\nvar devices = {\n  device1: {\n    id: 'device1',\n    name: 'Device #1',\n    address: '192.168.1.50',\n    port: 90,\n    state: 'on'\n  },\n  device2: {\n    id: 'device2',\n    name: 'Device #2',\n    address: '192.168.1.60',\n    port: 80,\n    state: 'off'\n  }\n};\nexport function getDevices() {\n  return _getDevices.apply(this, arguments);\n}\n\nfunction _getDevices() {\n  _getDevices = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", axios.get(\"\".concat(serverUrl, \"/devices\")));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getDevices.apply(this, arguments);\n}\n\nexport function getDeviceById(_x) {\n  return _getDeviceById.apply(this, arguments);\n}\n\nfunction _getDeviceById() {\n  _getDeviceById = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(deviceId) {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", devices[deviceId]);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getDeviceById.apply(this, arguments);\n}\n\nexport function addDevice(_x2) {\n  return _addDevice.apply(this, arguments);\n}\n\nfunction _addDevice() {\n  _addDevice = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(device) {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            index += 1;\n            devices[index] = _objectSpread({\n              id: index,\n              state: 'off'\n            }, device);\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _addDevice.apply(this, arguments);\n}\n\nexport function removeDevice(_x3) {\n  return _removeDevice.apply(this, arguments);\n}\n\nfunction _removeDevice() {\n  _removeDevice = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(deviceId) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            devices = _objectSpread({}, devices, _defineProperty({}, deviceId, undefined));\n            delete devices[deviceId];\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _removeDevice.apply(this, arguments);\n}\n\nexport function updateDevice(_x4, _x5) {\n  return _updateDevice.apply(this, arguments);\n}\n\nfunction _updateDevice() {\n  _updateDevice = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee5(deviceId, data) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            devices = _objectSpread({}, devices, _defineProperty({}, deviceId, _objectSpread({}, devices[deviceId], data)));\n\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return _updateDevice.apply(this, arguments);\n}\n\nexport function switchOn(_x6) {\n  return _switchOn.apply(this, arguments);\n}\n\nfunction _switchOn() {\n  _switchOn = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(deviceId) {\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return updateDevice(deviceId, {\n              state: 'on'\n            });\n\n          case 2:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _switchOn.apply(this, arguments);\n}\n\nexport function switchOff(_x7) {\n  return _switchOff.apply(this, arguments);\n}\n\nfunction _switchOff() {\n  _switchOff = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee7(deviceId) {\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return updateDevice(deviceId, {\n              state: 'off'\n            });\n\n          case 2:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _switchOff.apply(this, arguments);\n}\n\nexport function getDeviceLog(_x8) {\n  return _getDeviceLog.apply(this, arguments);\n}\n\nfunction _getDeviceLog() {\n  _getDeviceLog = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee8(deviceId) {\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            return _context8.abrupt(\"return\", [{\n              date: '2018-31-08 16:00:00',\n              action: 'On'\n            }, {\n              date: '2018-31-08 17:00:00',\n              action: 'Off'\n            }]);\n\n          case 1:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _getDeviceLog.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/c5276648/Documents/node-workshop/frontend/src/api.js"],"names":["axios","serverUrl","index","devices","device1","id","name","address","port","state","device2","getDevices","get","getDeviceById","deviceId","addDevice","device","removeDevice","undefined","updateDevice","data","switchOn","switchOff","getDeviceLog","date","action"],"mappings":"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","sourcesContent":["import axios from 'axios';\nconst serverUrl = 'http://localhost:3010';\nlet index = 3;\nlet devices = {\n    device1: {\n        id: 'device1',\n        name: 'Device #1',\n        address: '192.168.1.50',\n        port: 90,\n        state: 'on'\n    },\n    device2: {\n        id: 'device2',\n        name: 'Device #2',\n        address: '192.168.1.60',\n        port: 80,\n        state: 'off'\n    }\n};\n\nexport async function getDevices() {\n    return axios.get(`${serverUrl}/devices`);\n}\n\nexport async function getDeviceById(deviceId) {\n    return devices[deviceId];\n}\n\nexport async function addDevice(device) {\n    index += 1;\n    devices[index] = {\n        id: index,\n        state: 'off',\n        ...device\n    };\n}\n\nexport async function removeDevice(deviceId) {\n    devices = {\n        ...devices,\n        [deviceId]: undefined\n    };\n\n    delete devices[deviceId];\n}\n\nexport async function updateDevice(deviceId, data) {\n    devices = {\n        ...devices,\n        [deviceId]: {\n            ...devices[deviceId],\n            ...data\n        }\n    };\n}\n\nexport async function switchOn(deviceId) {\n    await updateDevice(deviceId, {\n        state: 'on'\n    });\n}\n\nexport async function switchOff(deviceId) {\n    await updateDevice(deviceId, {\n        state: 'off'\n    });\n}\n\nexport async function getDeviceLog(deviceId) {\n    return [\n        {\n            date: '2018-31-08 16:00:00',\n            action: 'On'\n        },\n        {\n            date: '2018-31-08 17:00:00',\n            action: 'Off'\n        }]\n}"]},"metadata":{},"sourceType":"module"}