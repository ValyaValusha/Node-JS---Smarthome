{"ast":null,"code":"import _objectSpread from \"/Users/c5276648/Documents/GitHub/Node-JS---Smarthome/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/Users/c5276648/Documents/GitHub/Node-JS---Smarthome/frontend/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/c5276648/Documents/GitHub/Node-JS---Smarthome/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/c5276648/Documents/GitHub/Node-JS---Smarthome/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/c5276648/Documents/GitHub/Node-JS---Smarthome/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/c5276648/Documents/GitHub/Node-JS---Smarthome/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/c5276648/Documents/GitHub/Node-JS---Smarthome/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/c5276648/Documents/GitHub/Node-JS---Smarthome/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/c5276648/Documents/GitHub/Node-JS---Smarthome/frontend/src/components/GroupForm.jsx\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { devicePropType } from '../constants';\nimport { getDevices } from '../api';\n\nvar GroupForm =\n/*#__PURE__*/\nfunction (_PureComponent) {\n  _inherits(GroupForm, _PureComponent);\n\n  function GroupForm(props) {\n    var _this;\n\n    _classCallCheck(this, GroupForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GroupForm).call(this, props));\n    _this.refreshDevices =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = _this;\n              _context.next = 3;\n              return getDevices();\n\n            case 3:\n              _context.t1 = _context.sent;\n              _context.t2 = {\n                devices: _context.t1\n              };\n\n              _context.t0.setState.call(_context.t0, _context.t2);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    _this.handleCancelClick = function () {\n      window.history.back();\n    };\n\n    _this.handleSubmit = function (event) {\n      _this.props.onSubmit(_objectSpread({}, _this.props.group, {\n        name: event.target.groupName.value // address: event.target.deviceAddress.value,\n        // port: parseInt(event.target.devicePort.value, 10)\n\n      }));\n\n      event.preventDefault();\n    };\n\n    _this.checkDeviceUniq = function (event) {\n      var _this$state = _this.state,\n          selectedDevices = _this$state.selectedDevices,\n          devices = _this$state.devices;\n      var selectedIndex = event.target.selectedIndex;\n      var findDevice = selectedDevices.some(function (device) {\n        return device.id === devices[selectedIndex].id;\n      });\n\n      _this.setState({\n        ggg: 'hy'\n      });\n\n      console.log(_this.state);\n      return selectedDevices.length > 0 || findDevice === false ? _this.setState({\n        selectedDevices: selectedDevices.push(devices[selectedIndex])\n      }) : 1;\n    };\n\n    _this.state = {\n      devices: [],\n      devicesAll: [],\n      selectedDevices: [],\n      ggg: ''\n    };\n    return _this;\n  }\n\n  _createClass(GroupForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.refreshDevices();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var group = this.props.group;\n      var _this$state2 = this.state,\n          devices = _this$state2.devices,\n          selectedDevices = _this$state2.selectedDevices;\n      return React.createElement(React.Fragment, null, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, selectedDevices.length > 0 && selectedDevices.map(function (device, index) {\n        return React.createElement(\"li\", {\n          key: device.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }, \" \", device.name);\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, this.state.ggg), React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"groupName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \"Group Name\"), React.createElement(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"groupName\",\n        name: \"groupName\",\n        placeholder: \"Group Name\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"form-group\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"label\", {\n        htmlFor: \"selectDevice\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"Add device to group\"), React.createElement(\"select\", {\n        className: \"form-control\",\n        id: \"selectDevice\",\n        name: \"selectDevice\",\n        placeholder: \"Select device to group\",\n        onChange: this.checkDeviceUniq,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, devices.map(function (device, index) {\n        return React.createElement(\"option\", {\n          key: device.id,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        }, \" \", device.name);\n      }))), React.createElement(\"div\", {\n        className: \"float-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mr-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"Submit\"), React.createElement(\"button\", {\n        type: \"button\",\n        className: \"btn btn-default\",\n        onClick: this.handleCancelClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Cancel\"))));\n    }\n  }]);\n\n  return GroupForm;\n}(PureComponent);\n\nexport { GroupForm as default };\nGroupForm.defaultProps = {\n  device: {\n    name: '',\n    address: '',\n    port: 80\n  }\n};\nGroupForm.propTypes = {\n  device: devicePropType,\n  onSubmit: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/Users/c5276648/Documents/GitHub/Node-JS---Smarthome/frontend/src/components/GroupForm.jsx"],"names":["React","PureComponent","PropTypes","devicePropType","getDevices","GroupForm","props","refreshDevices","devices","setState","handleCancelClick","window","history","back","handleSubmit","event","onSubmit","group","name","target","groupName","value","preventDefault","checkDeviceUniq","state","selectedDevices","selectedIndex","findDevice","some","device","id","ggg","console","log","length","push","devicesAll","map","index","defaultProps","address","port","propTypes","func","isRequired"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAAQC,UAAR,QAAyB,QAAzB;;IAEqBC,S;;;;;AACjB,qBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,mFAAMA,KAAN;AADe,UAenBC,cAfmB;AAAA;AAAA;AAAA;AAAA,6BAeF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEMH,UAAU,EAFhB;;AAAA;AAAA;AAAA;AAETI,gBAAAA,OAFS;AAAA;;AAAA,0BACRC,QADQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAfE;;AAAA,UAqBnBC,iBArBmB,GAqBC,YAAM;AACtBC,MAAAA,MAAM,CAACC,OAAP,CAAeC,IAAf;AACH,KAvBkB;;AAAA,UAyBnBC,YAzBmB,GAyBJ,UAACC,KAAD,EAAW;AACtB,YAAKT,KAAL,CAAWU,QAAX,mBACO,MAAKV,KAAL,CAAWW,KADlB;AAEIC,QAAAA,IAAI,EAAEH,KAAK,CAACI,MAAN,CAAaC,SAAb,CAAuBC,KAFjC,CAGI;AACA;;AAJJ;;AAOAN,MAAAA,KAAK,CAACO,cAAN;AACH,KAlCkB;;AAAA,UAoCnBC,eApCmB,GAoCD,UAACR,KAAD,EAAW;AAAA,wBACU,MAAKS,KADf;AAAA,UACnBC,eADmB,eACnBA,eADmB;AAAA,UACFjB,OADE,eACFA,OADE;AAAA,UAEnBkB,aAFmB,GAEDX,KAAK,CAACI,MAFL,CAEnBO,aAFmB;AAGzB,UAAIC,UAAU,GAAGF,eAAe,CAACG,IAAhB,CAAqB,UAAAC,MAAM;AAAA,eAAIA,MAAM,CAACC,EAAP,KAActB,OAAO,CAACkB,aAAD,CAAP,CAAuBI,EAAzC;AAAA,OAA3B,CAAjB;;AACA,YAAKrB,QAAL,CAAe;AAACsB,QAAAA,GAAG,EAAC;AAAL,OAAf;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAKT,KAAjB;AACA,aAAQC,eAAe,CAACS,MAAhB,GAAyB,CAAzB,IAA+BP,UAAU,KAAK,KAA/C,GAAyD,MAAKlB,QAAL,CAAc;AAACgB,QAAAA,eAAe,EAAEA,eAAe,CAACU,IAAhB,CAAqB3B,OAAO,CAACkB,aAAD,CAA5B;AAAlB,OAAd,CAAzD,GAA0I,CAAjJ;AACH,KA3CkB;;AAGf,UAAKF,KAAL,GAAa;AACThB,MAAAA,OAAO,EAAE,EADA;AAET4B,MAAAA,UAAU,EAAE,EAFH;AAGTX,MAAAA,eAAe,EAAE,EAHR;AAITM,MAAAA,GAAG,EAAE;AAJI,KAAb;AAHe;AASlB;;;;wCAEmB;AAChB,WAAKxB,cAAL;AACH;;;6BAiCQ;AAAA,UACGU,KADH,GACa,KAAKX,KADlB,CACGW,KADH;AAAA,yBAE8B,KAAKO,KAFnC;AAAA,UAEChB,OAFD,gBAECA,OAFD;AAAA,UAEUiB,eAFV,gBAEUA,eAFV;AAIL,aACI,0CACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACCA,eAAe,CAACS,MAAhB,GAAyB,CAAzB,IAA8BT,eAAe,CAACY,GAAhB,CAAoB,UAACR,MAAD,EAASS,KAAT;AAAA,eAC3C;AAAI,UAAA,GAAG,EAAET,MAAM,CAACC,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAsBD,MAAM,CAACX,IAA7B,CAD2C;AAAA,OAApB,CAD/B,CADA,EAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI,KAAKM,KAAL,CAAWO,GAAf,CALA,EAMA;AAAM,QAAA,QAAQ,EAAE,KAAKjB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEI;AAAO,QAAA,IAAI,EAAC,MAAZ;AACO,QAAA,SAAS,EAAC,cADjB;AAEO,QAAA,EAAE,EAAC,WAFV;AAGO,QAAA,IAAI,EAAC,WAHZ;AAIO,QAAA,WAAW,EAAC,YAJnB;AAKO,QAAA,QAAQ,MALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFJ,CADJ,EAWI;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,OAAO,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BADJ,EAEI;AAAQ,QAAA,SAAS,EAAC,cAAlB;AACQ,QAAA,EAAE,EAAC,cADX;AAEQ,QAAA,IAAI,EAAC,cAFb;AAGQ,QAAA,WAAW,EAAC,wBAHpB;AAIQ,QAAA,QAAQ,EAAI,KAAKS,eAJzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKKf,OAAO,CAAC6B,GAAR,CAAY,UAACR,MAAD,EAASS,KAAT;AAAA,eACT;AAAQ,UAAA,GAAG,EAAET,MAAM,CAACC,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA0BD,MAAM,CAACX,IAAjC,CADS;AAAA,OAAZ,CALL,CAFJ,CAXJ,EAuBI;AAAK,QAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,sBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,EAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,iBAAhC;AAAkD,QAAA,OAAO,EAAE,KAAKR,iBAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,CAvBJ,CANA,CADJ;AAsCH;;;;EAzFkCT,a;;SAAlBI,S;AA4FrBA,SAAS,CAACkC,YAAV,GAAyB;AACrBV,EAAAA,MAAM,EAAE;AACJX,IAAAA,IAAI,EAAE,EADF;AAEJsB,IAAAA,OAAO,EAAE,EAFL;AAGJC,IAAAA,IAAI,EAAE;AAHF;AADa,CAAzB;AAQApC,SAAS,CAACqC,SAAV,GAAsB;AAClBb,EAAAA,MAAM,EAAE1B,cADU;AAElBa,EAAAA,QAAQ,EAAEd,SAAS,CAACyC,IAAV,CAAeC;AAFP,CAAtB","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { devicePropType } from '../constants';\nimport {getDevices} from '../api';\n\nexport default class GroupForm extends PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            devices: [],\n            devicesAll: [],\n            selectedDevices: [],\n            ggg: ''\n        }\n    }\n\n    componentDidMount() {\n        this.refreshDevices();\n    }\n\n    refreshDevices = async () => {\n        this.setState({\n            devices: await getDevices()\n        });\n    };\n\n    handleCancelClick = () => {\n        window.history.back();\n    };\n\n    handleSubmit = (event) => {\n        this.props.onSubmit({\n            ...this.props.group,\n            name: event.target.groupName.value,\n            // address: event.target.deviceAddress.value,\n            // port: parseInt(event.target.devicePort.value, 10)\n        });\n\n        event.preventDefault();\n    };\n\n    checkDeviceUniq = (event) => {\n        let { selectedDevices, devices } = this.state;\n        let { selectedIndex } = event.target;\n        let findDevice = selectedDevices.some(device => device.id === devices[selectedIndex].id);\n        this.setState ({ggg:'hy'});\n        console.log(this.state);\n        return (selectedDevices.length > 0 || (findDevice === false)) ? this.setState({selectedDevices: selectedDevices.push(devices[selectedIndex])}) : 1;  \n    }\n\n\n    render() {\n        const { group } = this.props;\n        let { devices, selectedDevices } = this.state;\n\n        return (\n            <>\n            <ul>\n            {selectedDevices.length > 0 && selectedDevices.map((device, index) =>\n                    <li key={device.id}> {device.name}</li>\n            )}</ul>\n            <p>{this.state.ggg}</p>\n            <form onSubmit={this.handleSubmit}>\n                <div className=\"form-group\">\n                    <label htmlFor=\"groupName\">Group Name</label>\n                    <input type=\"text\"\n                           className=\"form-control\"\n                           id=\"groupName\"\n                           name=\"groupName\"\n                           placeholder=\"Group Name\"\n                           required/>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"selectDevice\">Add device to group</label>\n                    <select className=\"form-control\" \n                            id=\"selectDevice\" \n                            name=\"selectDevice\" \n                            placeholder=\"Select device to group\"\n                            onChange = {this.checkDeviceUniq}>\n                        {devices.map((device, index) =>\n                            <option key={device.id}> {device.name}</option>\n                        )}\n                    </select>\n                </div>\n                <div className=\"float-right\">\n                    <button type=\"submit\" className=\"btn btn-primary mr-2\">Submit</button>\n                    <button type=\"button\" className=\"btn btn-default\" onClick={this.handleCancelClick}>Cancel</button>\n                </div>\n            </form>\n\n            </>\n        );\n    }\n}\n\nGroupForm.defaultProps = {\n    device: {\n        name: '',\n        address: '',\n        port: 80\n    }\n};\n\nGroupForm.propTypes = {\n    device: devicePropType,\n    onSubmit: PropTypes.func.isRequired\n};"]},"metadata":{},"sourceType":"module"}